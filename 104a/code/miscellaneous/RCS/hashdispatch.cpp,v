head	1.4;
access;
symbols;
locks;
comment	@// @;


1.4
date	2016.11.15.01.07.15;	author -;	state -;
branches;
next	1.3;

1.3
date	2016.11.15.01.06.59;	author -;	state -;
branches;
next	1.2;

1.2
date	2016.11.15.01.06.23;	author -;	state -;
branches;
next	1.1;

1.1
date	2016.11.15.01.06.09;	author -;	state -;
branches;
next	;


desc
@@


1.4
log
@-
@
text
@// $Id: hashdispatch.cpp,v 1.3 2016-11-14 17:06:59-08 - - $

#include <iostream>
#include <stdio.h>
#include <unordered_map>
using namespace std;

void add (void) { printf ("%s\n", __PRETTY_FUNCTION__); }
void sub (void) { printf ("%s\n", __PRETTY_FUNCTION__); }
void mul (void) { printf ("%s\n", __PRETTY_FUNCTION__); }
void div (void) { printf ("%s\n", __PRETTY_FUNCTION__); }

using fn = void (*) ();
unordered_map<char,fn> dispatch = {
   {'+', add},
   {'-', sub},
   {'*', mul},
   {'/', div},
};

int main() {
   char ops[] = "+-*/";
   for (int i = 0; ops[i]; ++i) {
      fn f = dispatch[int(ops[i])];
      cout << reinterpret_cast<void*> (f) << " ";
      f();
   }
}

@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: hashdispatch.cpp,v 1.2 2016-11-14 17:06:23-08 - - $
d25 1
a25 1
      cout << static_cast<void*> (f) << " ";
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: hashdispatch.cpp,v 1.1 2016-11-14 17:06:09-08 - - $
d25 1
a25 1
      cout << f << " ";
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: arraydispatch.c,v 1.16 2016-11-14 17:02:46-08 - - $
d24 1
a24 1
      fn f = dispatch[(int)ops[i]];
@
